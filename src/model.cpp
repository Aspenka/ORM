#include "model.h"
#include "table.h"
#include "query.h"

/*==============================================================================
 Конструктор по умолчанию.
 tableName - имя таблицы, для которой создается модель записи
==============================================================================*/
Model::Model(QString tableName, QObject *parent) : QObject(parent),
    schema(tableName)
{
    setSchema(tableName);
}

/*==============================================================================
 Конструктор копирования
 obj - объект, данные которого предназначены для копирования в текущий объект
==============================================================================*/
Model::Model(const Model &obj, QObject)
{
    copy(obj);
}

/*==============================================================================
 Перегрузка оператора =
==============================================================================*/
Model &Model::operator =(const Model &obj)
{
    copy(obj);
    return *(this);
}

/*==============================================================================
 Перегрузка оператора ==
==============================================================================*/
bool Model::operator ==(const Model &right)
{
    if( (schema  == right.schema) &&
        (record == right.record) &&
        (relationData == right.relationData) &&
        (exists == right.exists))
    {
        return true;
    }
    else
    {
        return false;
    }
}

/*==============================================================================
 Перегрузка оператора !=
==============================================================================*/
bool Model::operator !=(const Model &right)
{
    return !(this == & right);
}

/*==============================================================================
 Метод генерирует строку SQL-запроса на добавление записи в БД
==============================================================================*/
QString Model::generateInsert()
{
    return QString("");
}

/*==============================================================================
 Метод генерирует строку SQL-запроса на удаление записи в БД
==============================================================================*/
QString Model::generateUpdate()
{
    return QString("");
}

void Model::copy(const Model &obj)
{
    schema = obj.schema;
    record = obj.record;
    relationData == obj.relationData;
    exists = obj.exists;
}

/*==============================================================================
 Метод проверяет наличие существования текущей записи в соответствующей таблице
 в БД (!!наличие записи подтверждается при совпадении только первичного ключа!!)
==============================================================================*/
bool Model::checkExistence()
{
    Query query(schema.getTableName());
    query.setCount();

    QStringList primaryList = schema.getPrimaryKeys();
    for(int i = 0; i < primaryList.size(); ++i)
    {
        QString fieldName = primaryList.at(i);
        query.setWhere(fieldName, getRecord(fieldName));
    }

    if(query.getCount() != 0)
    {
        return true;
    }
    return false;
}

/*==============================================================================
 Метод выполняет SQL-запрос и возвращает результаты его выполнения
==============================================================================*/
bool Model::execQuery()
{
    return true;
}

/*==============================================================================
 Метод устанавливает значение записи
 fieldName - имя поля
 value - значение поля
==============================================================================*/
void Model::setRecord(const QString &fieldName, const QVariant &value)
{
    record.insert(fieldName, value);
}

/*==============================================================================
 Метод устанавливает данные по конкретной связи
 relationName - имя связи
 relationModel - связанная модель
==============================================================================*/
void Model::setRelationData(const QString &relationName, Model *relationModel)
{
    relationData.insert(relationName, relationModel);
}

/*==============================================================================
 Метод устанавливает флаг существование записи в БД
 value - значение флага
==============================================================================*/
void Model::setExists(bool value)
{
    exists = value;
}

/*==============================================================================
 Метод устанавливает новую схему данных в соответствии с именем таблицы
 tableName
==============================================================================*/
void Model::setSchema(const QString &tableName)
{
    if(databases::checkTable(tableName, QString("base.db")))
    {
        schema = Table::instance().get(tableName);
    }
    else
    {
        errors::printError(errors::EXISTS_TABLE, tableName);
        schema.clear();
    }
}

/*==============================================================================
 Метод возвращает значение конкретной записи по имени поля fieldName
==============================================================================*/
QVariant Model::getRecord(const QString &fieldName)
{
    if(record.contains(fieldName))
    {
        return record.value(fieldName);
    }
    return QVariant("");
}

/*==============================================================================
 Метод возвращает связанную модель по имени связи relationName
==============================================================================*/
Model *Model::getRelationData(const QString &relationName)
{
    if(relationData.contains(relationName))
    {
        return relationData.value(relationName);
    }
    return new Model("");
}

/*==============================================================================
 Метод возвращает флаг существования текущей модели в БД
==============================================================================*/
bool Model::isExists()
{
    if(!exists)
    {
        exists = checkExistence();
    }
    return exists;
}

/*==============================================================================
 Метод сохраняет модель в БД
==============================================================================*/
bool Model::save()
{
    return true;
}

/*==============================================================================
 Метод удаляет модель из БД
==============================================================================*/
bool Model::remove()
{
    return true;
}

/*==============================================================================
 Метод очищает данные о модели
==============================================================================*/
void Model::clear()
{
    schema.clear();
    record.clear();
    relationData.clear();
    exists = false;
}

