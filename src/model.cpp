#include "model.h"

/*==============================================================================
 Конструктор по умолчанию.
 tableName - имя таблицы, для которой создается модель записи
==============================================================================*/
Model::Model(QString tableName, QObject *parent) : QObject(parent)
{
    Q_UNUSED(tableName);
}

/*==============================================================================
 Конструктор копирования
 obj - объект, данные которого предназначены для копирования в текущий объект
==============================================================================*/
Model::Model(const Model &obj, QObject)
{
    Q_UNUSED(obj);
}

/*==============================================================================
 Перегрузка оператора =
==============================================================================*/
Model &Model::operator =(const Model &obj)
{
    Q_UNUSED(obj);
    return *(this);
}

/*==============================================================================
 Перегрузка оператора ==
==============================================================================*/
bool Model::operator ==(const Model &right)
{
    Q_UNUSED(right);
    return true;
}

/*==============================================================================
 Перегрузка оператора !=
==============================================================================*/
bool Model::operator !=(const Model &right)
{
    Q_UNUSED(right);
    return true;
}

/*==============================================================================
 Метод копирует данные из объекта obj в текущий объект
==============================================================================*/
void Model::copy(const Model &obj)
{
    Q_UNUSED(obj);
}

/*==============================================================================
 Метод устанавливает значение записи
 fieldName - имя поля
 value - значение поля
==============================================================================*/
void Model::setRecord(const QString &fieldName, const QVariant &value)
{
    Q_UNUSED(fieldName);
    Q_UNUSED(value);
}

/*==============================================================================
 Метод устанавливает данные по конкретной связи
 relationName - имя связи
 relationModel - связанная модель
==============================================================================*/
void Model::setRelationData(const QString &relationName, const Model *relationModel)
{
    Q_UNUSED(relationName);
    Q_UNUSED(relationModel);
}

/*==============================================================================
 Метод устанавливает флаг существование записи в БД
 value - значение флага
==============================================================================*/
void Model::setExists(bool value)
{
    Q_UNUSED(value);
}

/*==============================================================================
 Метод возвращает значение конкретной записи по имени поля fieldName
==============================================================================*/
QString Model::getRecord(const QString &fieldName)
{
    Q_UNUSED(fieldName);
    return QString("");
}

/*==============================================================================
 Метод возвращает связанную модель по имени связи relationName
==============================================================================*/
Model *Model::getRelationData(const QString &relationName)
{
    Q_UNUSED(relationName);
    return this;
}

/*==============================================================================
 Метод возвращает флаг существования текущей модели в БД
==============================================================================*/
bool Model::isExists()
{
    return true;
}

/*==============================================================================
 Метод сохраняет модель в БД
==============================================================================*/
bool Model::save()
{
    return true;
}

/*==============================================================================
 Метод удаляет модель из БД
==============================================================================*/
bool Model::remove()
{
    return true;
}

/*==============================================================================
 Метод очищает данные о модели
==============================================================================*/
void Model::clear()
{

}

